<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|ARM">
      <Configuration>Debug</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x86">
      <Configuration>Debug</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x86">
      <Configuration>Release</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="src\main.cpp" />
    <ClCompile Include="src\overlaycontroller.cpp" />
    <ClCompile Include="src\tabcontrollers\WalkInPlaceTabController.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="src\logging.h" />
    <QtMoc Include="src\tabcontrollers\WalkInPlaceTabController.h" />
    <QtMoc Include="src\overlaycontroller.h" />
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{50b93dc3-ef2e-4f7e-97cd-f27bcd89324b}</ProjectGuid>
    <Keyword>Linux</Keyword>
    <RootNamespace>client_overlay_linux</RootNamespace>
    <MinimumVisualStudioVersion>15.0</MinimumVisualStudioVersion>
    <ApplicationType>Linux</ApplicationType>
    <ApplicationTypeRevision>1.0</ApplicationTypeRevision>
    <TargetLinuxPlatform>Generic</TargetLinuxPlatform>
    <LinuxProjectType>{2238F9CD-F817-4ECC-BD14-2524D2669B35}</LinuxProjectType>
    <Keyword>QtVS_v304</Keyword>
    <QtMsBuild Condition="'$(QtMsBuild)'=='' OR !Exists('$(QtMsBuild)\qt.targets')">$(MSBuildProjectDirectory)\QtMsBuild</QtMsBuild>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x86'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x86'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
    <RemoteRootDir>/tmp/vsbuild/OpenVR-WalkInPlace</RemoteRootDir>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <Import Project="$(QtMsBuild)\qt_defaults.props" Condition="Exists('$(QtMsBuild)\qt_defaults.props')" />
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Debug|x86'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Release|x86'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
    <QtLinkNatvisFile>false</QtLinkNatvisFile>
  </PropertyGroup>
  <PropertyGroup Label="QtSettings" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <QtPathBinaries>/usr/bin</QtPathBinaries>
    <QtQMakeTemplate>app</QtQMakeTemplate>
    <QtPathLibraryExecutables>/usr/lib</QtPathLibraryExecutables>
    <QtModules>core;network;gui;svg;widgets;qml;quick</QtModules>
  </PropertyGroup>
  <Target Name="QtMsBuildNotFound" BeforeTargets="CustomBuild;ClCompile" Condition="!Exists('$(QtMsBuild)\qt.targets') OR !Exists('$(QtMsBuild)\Qt.props')">
    <Message Importance="High" Text="QtMsBuild: could not locate qt.targets, qt.props; project may not build correctly." />
  </Target>
  <Target Name="IncludeMocFiles" BeforeTargets="CustomBuild;ClCompile">
    <ItemGroup>
      <ClCompile Include="$(QtIntDir)moc\$([System.String]::Copy('%(QtMoc.Identity)').Replace('.h', '.mock.cpp'))" />
    </ItemGroup>
  </Target>
  <ImportGroup Label="ExtensionSettings" />
  <ImportGroup Label="Shared" />
  <ImportGroup Label="PropertySheets">
    <Import Project="$(QtMsBuild)\Qt.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x86'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x86'">
    <Import Project="..\env.props" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(IncludePath)</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(IncludePath)</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(IncludePath)</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(IncludePath)</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(RemoteRootDir)/vcpkg_installed/x64-linux/include</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
    <LibraryPath>$(RemoteRootDir)/lib_vrwalkinplace_linux/bin/x64/Debug;$(RemoteRootDir)/vcpkg_installed/x64-linux/debug/lib;$(LibraryPath)</LibraryPath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(RemoteRootDir)/vcpkg_installed/x64-linux/include</IncludePath>
    <LibraryPath>$(RemoteRootDir)/lib_vrwalkinplace_linux/bin/x64/Release;$(RemoteRootDir)/vcpkg_installed/x64-linux/lib;$(LibraryPath)</LibraryPath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x86'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(IncludePath)</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x86'">
    <IncludePath>$(RemoteRootDir)/lib_vrwalkinplace_linux/include;$(IncludePath)</IncludePath>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <MultiProcNumber>8</MultiProcNumber>
    <TargetName>OpenVR-WalkInPlaceOverlay</TargetName>
    <TargetExt />
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>~/Repos/vcpkg/installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>~/Repos/vcpkg/installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>~/Repos/vcpkg/installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>~/Repos/vcpkg/installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>$(RemoteProjectDir)vcpkg_installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
      <Command>
      </Command>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>$(RemoteProjectDir)vcpkg_installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link />
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x86'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>~/Repos/vcpkg/installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x86'">
    <ClCompile>
      <CppLanguageStandard>c++17</CppLanguageStandard>
      <Verbose>true</Verbose>
      <PositionIndependentCode>true</PositionIndependentCode>
      <AdditionalIncludeDirectories>~/Repos/vcpkg/installed/x64-linux/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <QtMoc>
      <CompilerFlavor>unix</CompilerFlavor>
      <DynamicSource>false</DynamicSource>
      <QtMocFileName>%(RelativeDir)\%(Filename).mock.cpp</QtMocFileName>
    </QtMoc>
    <Link>
      <LibraryDependencies>vrwalkinplace;boost_filesystem;easyloggingpp;openvr_api;Qt5Core;Qt5Gui;Qt5Qml;Qt5Quick;Qt5Widgets;Qt5Svg</LibraryDependencies>
      <OutputFile>$(ProjectDir)bin\$(Platform)\$(TargetFileName)</OutputFile>
    </Link>
    <PreBuildEvent>
      <AdditionalSourcesToCopyMapping>$(SolutionDir)vcpkg.json:=$(RemoteRootDir)/vcpkg.json</AdditionalSourcesToCopyMapping>
    </PreBuildEvent>
    <RemotePreBuildEvent>
      <Command>cd $(RemoteRootDir) &amp;&amp; $(VCPKG_ROOT)vcpkg install
</Command>
    </RemotePreBuildEvent>
    <RemotePreBuildEvent>
      <Message>Installing Dependencies:</Message>
    </RemotePreBuildEvent>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <Import Project="$(QtMsBuild)\qt.targets" Condition="Exists('$(QtMsBuild)\qt.targets')" />
  <ImportGroup Label="ExtensionTargets" />
</Project>